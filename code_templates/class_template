var express = require('express');
var router = express();

var bodyParser = require('body-parser');
var primary_key = '_id';

var dbOps = require("./dbOps.js");
var authen = require("./authen.js");
var typeConverter = require("./typeConverter.js");

var $collection_name = {};

// Attributes list
$collection_name.attributes = $attribute_names;
// DB schema
$collection_name.attribute_schema = {
$attribute_schema
};

$collection_name.$collection_name_schema = 
{
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: $collection_name.attributes,
            properties: $collection_name.attribute_schema
        }
    },
    validationLevel: "moderate"
};

$collection_name.check_$collection_name_collection = function() {
    if ($collection_name.attributes.length != 0) {
        dbOps.check_collection("$collection_name", $collection_name.$collection_name_schema, 
            function(err, collection) {
                if (!err)
                    console.log("$collection_name schema checked");
                else
                    console.log(err);
            });
    } else {
        console.log("$collection_name has no schema");
    }
}

// CRUD: Create one and Create Many
router.post('/', function (req, res) {
    try {
        if (typeof(req.body) !== 'undefined' && Object.keys(req.body).length != 0) {
            
            var data = req.body;
            var collection = "$collection_name";

            //DB create
            dbOps.create(collection, data, function(err, result) {
                if (err) {
                    // Conflic between specified attributes and db schema
                    res.status(400).send(err.errmsg);
                } else {   
                    var response = {
                        result : result.result,
                        ops : result.ops,
                        insertedCount : result.insertedCount,
                        insertedIds : result.insertedId ? [result.insertedId] : result.insertedIds
                    };
                    res.status(201).send(response);
                }
            });
        } else {
            res.status(400).send("Bad Request");
        }
    } catch(err) {
        res.status(500).send("Internal Error");
    }
});

//CRUD: ReadOne from objectId
router.get('/:uid', function (req, res) {
    try {
        if (typeof(req.params.uid) !== 'undefined' && 
            req.params.uid.length == 24) {
        
            var collection = "$collection_name";
            var _id = req.params.uid;

            //DB readOne
            dbOps.readOne(collection, _id, function(err, result) {
                if (err) {
                    res.status(400).send(err.errmsg);
                } else {
                    res.status(200).send(result);
                }
            });
        } else {
            res.status(404).send("Not Found");
        }
    } catch(err) {
        res.status(500).send("Internal Error");
    }       
});


//CRUD: ReadMany from attributes
router.get('/', function (req, res) {
    try {
        if (typeof(req.query._id) !== 'undefined' &&
            req.query._id.length != 24) {

            res.status(404).send("Not Found");
            return;
        }

        var collection = "$collection_name";
        var _id = req.query._id ? req.query._id : null;
        delete req.query["_id"];
        var query = {};
        Object.keys(req.query).forEach(key => {
            if ($collection_name.attribute_schema.hasOwnProperty(key)) {
                query[key] = typeConverter.readConvert(req.query[key], 
                        $collection_name.attribute_schema[key].bsonType);
            }
        })

        //DB Many
        dbOps.readAll(collection, _id, query, function(err, result) {
            if (err) {
                res.status(400).send(err.errmsg);
            } else {
                res.status(200).send(result);
            }
        });
    } catch(err) {
        res.status(500).send("Internal Error");
    }       
});

//CRUD: Delete by id
router.delete('/:uid', function (req, res) {
    try {
        if (typeof(req.params.uid) !== 'undefined' && 
            req.params.uid.length == 24) {
        
            var collection = "$collection_name";
            var _id = req.params.uid;

            dbOps.delete(collection, _id, null, function(err, result) {
                if (err) {
                    res.status(400).send(err.errmsg);
                } else {
                    var response = {
                        result : result.result,
                        deletedCount : result.deletedCount
                    };
                    res.status(200).send(response);
                }
            });
        } else {
            res.status(404).send("Not Found");
        }
    } catch(err) {
        res.status(500).send("Internal Error");
    }       
});

//CRUD: Delete
router.delete('/', function (req, res) {
    try {
        if (typeof(req.body) !== 'undefined' && Object.keys(req.body).length != 0) {
            
            var data = req.body;
            var collection = "$collection_name";
            var _id = data._id ? data._id : null;
            delete data["_id"];

            //DB delete
            dbOps.delete(collection, _id, data, function(err, result) {
                if (err) {
                    res.status(400).send(err.errmsg);
                }
                else {
                    var response = {
                        result : result.result,
                        deletedCount : result.deletedCount
                    };
                    res.status(200).send(response);
                }
            });
        } else {
            res.status(405).send("Method Not Allowed");
        }

    } catch(err) {
        res.status(500).send("Internal Error");
    } 

});

//CRUD: PUT Update/Replace
router.put('/:uid', function (req, res) {
    try {
        if (typeof(req.params.uid) !== 'undefined' && req.params.uid.length == 24 && 
            Object.keys(req.body).length != 0) {

            var data = req.body;
            var _id = req.params.uid;
            var collection = "$collection_name";
            delete data["_id"];

            //DB Replace
            dbOps.put(collection, _id, data, function(err, result) {
                if (err) {
                    res.status(400).send(err.errmsg);
                }
                else {
                    console.log(result);
                    var response = {
                        result : result.result
                    };
                    res.status(200).send(response);
                }
            });

        } else {
            res.status(404).send("Not Found");
            return;
        }

    } catch(err) {
        res.status(500).send("Internal Error");
    } 
});

//CRUD: PATCH Update/Modify 
router.patch('/:uid', function (req, res) {
    try {
        if (typeof(req.params.uid) !== 'undefined' && req.params.uid.length == 24 && 
            Object.keys(req.body).length != 0) {

            var data = req.body;
            var _id = req.params.uid;
            var collection = "$collection_name";
            delete data["_id"];

            //DB Modify
            dbOps.patch(collection, _id, data, function(err, result) {
                if (err) {
                    res.status(400).send(err.errmsg);
                }
                else {
                    var response = {
                        result : result.result
                    };
                    res.status(200).send(response);
                }
            });

        } else {
            res.status(404).send("Not Found");
            return;
        }

    } catch(err) {
        res.status(500).send("Internal Error");
    } 
});

module.exports = router;
module.exports.check_collection = $collection_name.check_$collection_name_collection;